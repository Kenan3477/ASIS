# NGINX Load Balancer Configuration
upstream asis_backend {
    least_conn;
    server asis-safety-1:8000 max_fails=3 fail_timeout=30s;
    server asis-safety-2:8000 max_fails=3 fail_timeout=30s;
    server asis-safety-3:8000 max_fails=3 fail_timeout=30s;
    # Add more backend servers as needed
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=analyze_limit:10m rate=5r/s;

server {
    listen 80;
    listen 443 ssl http2;
    server_name asis.company.com;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/asis.crt;
    ssl_certificate_key /etc/ssl/private/asis.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Health check endpoint (no rate limiting)
    location /health {
        proxy_pass http://asis_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }
    
    # Analysis endpoint (stricter rate limiting)
    location /analyze {
        limit_req zone=analyze_limit burst=20 nodelay;
        
        proxy_pass http://asis_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # API endpoints (general rate limiting)
    location /api/ {
        limit_req zone=api_limit burst=50 nodelay;
        
        proxy_pass http://asis_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Enable request/response compression
        gzip on;
        gzip_types application/json text/plain application/xml;
        gzip_min_length 1000;
    }
    
    # Static files (if any)
    location /static/ {
        alias /var/www/asis/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Metrics endpoint (restricted access)
    location /metrics {
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://asis_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Redirect HTTP to HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
    
    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /var/www/html;
    }
}

# Upstream health monitoring
server {
    listen 8080;
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    location /upstream-status {
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Custom upstream status page
        proxy_pass http://asis_backend/health;
    }
}
