#!/usr/bin/env python3
"""
ASIS Generated Data Processor
============================

Purpose: autonomous data analysis and reporting system
Generated: 2025-09-22T16:12:34.279401
Session: 20250922_161234
"""

import json
import csv
import os
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional

class AsisDataProcessor:
    """Autonomous data processing system generated by ASIS"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {
            "input_format": "json",
            "output_format": "csv",
            "processing_mode": "batch",
            "validation_enabled": True
        }
        
        self.session_id = "20250922_161234"
        self.processed_count = 0
        self.error_count = 0
        
        print(f"🔧 ASIS Data Processor initialized")
        print(f"   Session: {self.session_id}")
        print(f"   Config: {self.config}")
    
    def process_data(self, input_data: Any) -> Dict[str, Any]:
        """Process input data according to configuration"""
        
        result = {
            "timestamp": datetime.now().isoformat(),
            "session_id": self.session_id,
            "input_type": type(input_data).__name__,
            "processed_data": None,
            "metadata": {},
            "success": False
        }
        
        try:
            if isinstance(input_data, dict):
                processed = self._process_dict_data(input_data)
            elif isinstance(input_data, list):
                processed = self._process_list_data(input_data)
            elif isinstance(input_data, str):
                processed = self._process_string_data(input_data)
            else:
                processed = self._process_generic_data(input_data)
            
            result["processed_data"] = processed
            result["metadata"] = {
                "original_size": len(str(input_data)),
                "processed_size": len(str(processed)),
                "processing_time_ms": 1.0  # Simulated timing
            }
            
            result["success"] = True
            self.processed_count += 1
            
        except Exception as e:
            result["error"] = str(e)
            self.error_count += 1
        
        return result
    
    def _process_dict_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Process dictionary data"""
        processed = {}
        
        for key, value in data.items():
            # Clean and standardize keys
            clean_key = key.lower().replace(' ', '_').replace('-', '_')
            
            # Process values based on type
            if isinstance(value, str):
                processed[clean_key] = value.strip().title()
            elif isinstance(value, (int, float)):
                processed[clean_key] = value
                processed[f"{clean_key}_squared"] = value ** 2
            else:
                processed[clean_key] = str(value)
        
        # Add metadata
        processed["_asis_processed"] = True
        processed["_asis_timestamp"] = datetime.now().isoformat()
        
        return processed
    
    def _process_list_data(self, data: List[Any]) -> List[Dict[str, Any]]:
        """Process list data"""
        processed = []
        
        for i, item in enumerate(data):
            processed_item = {
                "index": i,
                "original_value": item,
                "processed_value": self._transform_value(item),
                "asis_metadata": {
                    "position": i + 1,
                    "total_items": len(data),
                    "percentage": (i + 1) / len(data) * 100
                }
            }
            processed.append(processed_item)
        
        return processed
    
    def _process_string_data(self, data: str) -> Dict[str, Any]:
        """Process string data"""
        return {
            "original_text": data,
            "length": len(data),
            "word_count": len(data.split()),
            "uppercase": data.upper(),
            "lowercase": data.lower(),
            "reversed": data[::-1],
            "first_char": data[0] if data else "",
            "last_char": data[-1] if data else "",
            "is_numeric": data.isdigit(),
            "processed_timestamp": datetime.now().isoformat()
        }
    
    def _process_generic_data(self, data: Any) -> Dict[str, Any]:
        """Process generic data types"""
        return {
            "original_type": type(data).__name__,
            "string_representation": str(data),
            "length": len(str(data)),
            "hash_value": hash(str(data)) if str(data) else 0,
            "processed_timestamp": datetime.now().isoformat()
        }
    
    def _transform_value(self, value: Any) -> Any:
        """Transform individual values"""
        if isinstance(value, str):
            return value.strip().title()
        elif isinstance(value, int):
            return value * 2
        elif isinstance(value, float):
            return round(value * 1.5, 2)
        else:
            return f"transformed_{str(value)}"
    
    def get_processing_stats(self) -> Dict[str, Any]:
        """Get processing statistics"""
        return {
            "session_id": self.session_id,
            "processed_count": self.processed_count,
            "error_count": self.error_count,
            "success_rate": (self.processed_count / (self.processed_count + self.error_count) * 100) 
                           if (self.processed_count + self.error_count) > 0 else 0,
            "config": self.config
        }

def main():
    """Demo the data processor"""
    
    processor = AsisDataProcessor()
    
    # Test with different data types
    test_data = [
        {"name": "john doe", "age": 30, "city": "new york"},
        ["apple", "banana", "cherry", 123, 45.6],
        "Hello World from ASIS!",
        42
    ]
    
    print("\n🚀 Running ASIS Data Processor Demo")
    print("=" * 40)
    
    for i, data in enumerate(test_data, 1):
        print(f"\n📊 Processing item {i}: {type(data).__name__}")
        result = processor.process_data(data)
        
        if result["success"]:
            print(f"   ✅ Success! Processed {result['input_type']}")
            print(f"   📈 Metadata: {result['metadata']}")
        else:
            print(f"   ❌ Error: {result.get('error', 'Unknown')}")
    
    # Show final stats
    stats = processor.get_processing_stats()
    print(f"\n📊 Final Statistics:")
    print(f"   Processed: {stats['processed_count']}")
    print(f"   Errors: {stats['error_count']}")
    print(f"   Success Rate: {stats['success_rate']:.1f}%")

if __name__ == "__main__":
    main()